#!/usr/bin/env python
# Copyright 2021 by Emily Smith and Giordon Stark Permission is hereby granted, free of charge, to
# any person obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the following
# conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import print_function
from periphery import I2C
from time import sleep
import sys, os, csv, argparse

parser = argparse.ArgumentParser(description='Clock Configuration')
parser.add_argument('-c', '--configfile', dest='conf', action='store', default= os.path.dirname(os.path.realpath(__file__)+'/init_clock/si5345_GF040280-Registers.txt', help='Clock Chip Configuration Registers Text File')
args = parser.parse_args()

i2c = I2C("/dev/i2c-0")

def set_page(i2c, page):
    i2c.transfer(0x68, [I2C.Message([0x01, page])])

def do_i2c_block_write(i2c, block):
    page, register, value = block
    if page != do_i2c_block_write.page:
        set_page(i2c, page)
        do_i2c_block_write.page = page
    i2c.transfer(0x68, [I2C.Message([register, value])])
    
do_i2c_block_write.page = 0x00

def decomment(csvfile):
    for row in csvfile:
        raw = row.split('#')[0].strip()
        if raw: yield row
    
c = []
with open(args.conf) as f:
    csv_reader = csv.reader(decomment(f))
    for row in csv_reader:
        c.append(row)

c = [[int(j, 16) for j in i] for i in c[1:]]

for i in c:
    page = (i[0] >> 8) & 0xFF
    address = i[0] & 0xFF

    i.insert(0,page)
    i[1] = address    

#print(c)
do_i2c_block_write(i2c, c[0])
do_i2c_block_write(i2c, c[1])
do_i2c_block_write(i2c, c[2])
sleep(0.3) # 300 ms delay
for i in c[3:]:
    do_i2c_block_write(i2c, i)

print('Clock Chip was configured with configuration file: ' + args.conf)
i2c.close()
